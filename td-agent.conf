####
## Output descriptions:
##

# Treasure Data (http://www.treasure-data.com/) provides cloud based data
# analytics platform, which easily stores and processes data from td-agent.
# FREE plan is also provided.
# @see http://docs.fluentd.org/articles/http-to-td
#
# This section matches events whose tag is td.DATABASE.TABLE
<match td.*.*>
  @type tdlog
  @id output_td
  apikey YOUR_API_KEY

  auto_create_table
  <buffer>
    @type file
    path /var/log/td-agent/buffer/td
  </buffer>

  <secondary>
    @type file
    path /var/log/td-agent/failed_records
  </secondary>
</match>

## match tag=debug.** and dump to console
<match debug.**>
  @type stdout
  @id output_stdout
</match>

####
## Source descriptions:
##

## built-in TCP input
## @see http://docs.fluentd.org/articles/in_forward
<source>
  @type forward
  @id input_forward
</source>

## built-in UNIX socket input
#<source>
#  type unix
#</source>

# HTTP input
# POST http://localhost:8888/<tag>?json=<json>
# POST http://localhost:8888/td.myapp.login?json={"user"%3A"me"}
# @see http://docs.fluentd.org/articles/in_http
<source>
  @type http
  @id input_http
  port 8888
</source>

## live debugging agent
<source>
  @type debug_agent
  @id input_debug_agent
  bind 127.0.0.1
  port 24230
</source>

####
## Examples:
##

## File input
## read apache logs continuously and tags td.apache.access
#<source>
#  @type tail
#  @id input_tail
#  <parse>
#    @type apache2
#  </parse>
#  path /var/log/httpd-access.log
#  tag td.apache.access
#</source>

## File output
## match tag=local.** and write to file
#<match local.**>
#  @type file
#  @id output_file
#  path /var/log/td-agent/access
#</match>

## Forwarding
## match tag=system.** and forward to another td-agent server
#<match system.**>
#  @type forward
#  @id output_system_forward
#
#  <server>
#    host 192.168.0.11
#  </server>
#  # secondary host is optional
#  <secondary>
#    <server>
#      host 192.168.0.12
#    </server>
#  </secondary>
#</match>

## Multiple output
## match tag=td.*.* and output to Treasure Data AND file
#<match td.*.*>
#  @type copy
#  @id output_copy
#  <store>
#    @type tdlog
#    apikey API_KEY
#    auto_create_table
#    <buffer>
#      @type file
#      path /var/log/td-agent/buffer/td
#    </buffer>
#  </store>
#  <store>
#    @type file
#    path /var/log/td-agent/td-%Y-%m-%d/%H.log
#  </store>
#</match>
########################################################################################################################
########################################################################################################################################
#######################################################################################################################
#Input tag per estrazione su elasticsearch da fail2ban.log
<source>
    @type tail 
    path /var/log/fail2ban.log 
    pos_file /var/log/td-agent/fail2ban3.log.pos
    tag f2b_log 
    read_from_head true
    #Parsing con regexp
    format /(?<time>(?>\d\d){1,2}-(?:0?[1-9]|1[0-2])-(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])[T ](?:2[0123]|[01]?[0-9]):?(?:[0-5][0-9])(?::(?:(?:[0-5][0-9]|60)(?:[:.,][0-9]+)?))) (?<log_src>\b\w+\b).(?<action>\b\w+\b) *\[(?<f2b_digit>(?:(?<![0-9.+-])(?>[+-]?(?:(?:[0-9]+(?:\.[0-9]+)?)|(?:\.[0-9]+)))))\]: (?<severity>([A-a]lert|ALERT|[T|t]race|TRACE|[D|d]ebug|DEBUG|[N|n]otice|NOTICE|[I|i]nfo|INFO|[W|w]arn?(?:ing)?|WARN?(?:ING)?|[E|e]rr?(?:or)?|ERR?(?:OR)?|[C|c]rit?(?:ical)?))*(?<log_message>.*)/
</source>
#DDD#
#DDD#
#DDD#
#Output tag per estrazione su elasticsearch
<filter f2b_log>
 @type parser 
 reserve_data true #this is needed otherwise we will not keep the original keys from source tag
 key_name log_message 
 <parse> 
  @type regexp
  expression /(?<IP>\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b)/
 </parse>
</filter> 



<filter f2b_log>
  @type                  geoip
  geoip_lookup_keys      IP
  <record>
    # lat lon as properties
    # ex. {"lat" => 37.4192008972168, "lon" => -122.05740356445312 }
    location_properties  '{ "lat" : ${location.latitude["IP"]}, "lon" : ${location.longitude["IP"]} }'
  
    # lat lon as string
    # ex. "37.4192008972168,-122.05740356445312"
    location_string      ${location.latitude["IP"]},${location.longitude["IP"]}
    
    # GeoJSON (lat lon as array) is useful for Kibana's bettermap.
    # ex. [-122.05740356445312, 37.4192008972168]
    location_array       '[${location.longitude["IP"]},${location.latitude["IP"]}]'
  </record>

  # To avoid get stacktrace error with `[null, null]` array for elasticsearch.
  skip_adding_null_record  true
</filter>



<match f2b_log> 
 @type elasticsearch 
 host localhost
 port 9200
 reconnect_on_error true
 #compression_level default_compression

 flush_interval 10s
 num_threads 2

# logstash_format true 
 #index_name fail2ban_fluent 
 #type_name log 
 #verify_es_version_at_startup false
 suppress_type_name true

 logstash_format true
 utc_index false
 time_key_format "%Y-%m-%dT%H:%M:%S.%N%z"
 time_key time 
 time_key_exclude_timestamp true
 include_timestamp false
 
</match>
#ccc#<match pattern> 
#ccc#  @type file 
#ccc#  path /var/log/td-agent 
#ccc#  append true 
#ccc#</match>
